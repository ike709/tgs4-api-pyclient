# coding: utf-8

"""
    TGS API

    A production scale tool for BYOND server management  # noqa: E501

    OpenAPI spec version: 8.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'AllOfUserCreatedBy',
        'o_auth_connections': 'list[OAuthConnection]',
        'permission_set': 'AllOfUserPermissionSet',
        'group': 'AllOfUserGroup',
        'enabled': 'bool',
        'created_at': 'datetime',
        'system_identifier': 'str',
        'id': 'int',
        'name': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'o_auth_connections': 'oAuthConnections',
        'permission_set': 'permissionSet',
        'group': 'group',
        'enabled': 'enabled',
        'created_at': 'createdAt',
        'system_identifier': 'systemIdentifier',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, created_by=None, o_auth_connections=None, permission_set=None, group=None, enabled=None, created_at=None, system_identifier=None, id=None, name=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._o_auth_connections = None
        self._permission_set = None
        self._group = None
        self._enabled = None
        self._created_at = None
        self._system_identifier = None
        self._id = None
        self._name = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if o_auth_connections is not None:
            self.o_auth_connections = o_auth_connections
        if permission_set is not None:
            self.permission_set = permission_set
        if group is not None:
            self.group = group
        if enabled is not None:
            self.enabled = enabled
        if created_at is not None:
            self.created_at = created_at
        if system_identifier is not None:
            self.system_identifier = system_identifier
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def created_by(self):
        """Gets the created_by of this User.  # noqa: E501

        The Tgstation.Server.Api.Models.User who created this Tgstation.Server.Api.Models.User  # noqa: E501

        :return: The created_by of this User.  # noqa: E501
        :rtype: AllOfUserCreatedBy
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this User.

        The Tgstation.Server.Api.Models.User who created this Tgstation.Server.Api.Models.User  # noqa: E501

        :param created_by: The created_by of this User.  # noqa: E501
        :type: AllOfUserCreatedBy
        """

        self._created_by = created_by

    @property
    def o_auth_connections(self):
        """Gets the o_auth_connections of this User.  # noqa: E501

        List of Tgstation.Server.Api.Models.OAuthConnections associated with the Tgstation.Server.Api.Models.User.  # noqa: E501

        :return: The o_auth_connections of this User.  # noqa: E501
        :rtype: list[OAuthConnection]
        """
        return self._o_auth_connections

    @o_auth_connections.setter
    def o_auth_connections(self, o_auth_connections):
        """Sets the o_auth_connections of this User.

        List of Tgstation.Server.Api.Models.OAuthConnections associated with the Tgstation.Server.Api.Models.User.  # noqa: E501

        :param o_auth_connections: The o_auth_connections of this User.  # noqa: E501
        :type: list[OAuthConnection]
        """

        self._o_auth_connections = o_auth_connections

    @property
    def permission_set(self):
        """Gets the permission_set of this User.  # noqa: E501

        The Tgstation.Server.Api.Models.PermissionSet directly associated with the Tgstation.Server.Api.Models.User.  # noqa: E501

        :return: The permission_set of this User.  # noqa: E501
        :rtype: AllOfUserPermissionSet
        """
        return self._permission_set

    @permission_set.setter
    def permission_set(self, permission_set):
        """Sets the permission_set of this User.

        The Tgstation.Server.Api.Models.PermissionSet directly associated with the Tgstation.Server.Api.Models.User.  # noqa: E501

        :param permission_set: The permission_set of this User.  # noqa: E501
        :type: AllOfUserPermissionSet
        """

        self._permission_set = permission_set

    @property
    def group(self):
        """Gets the group of this User.  # noqa: E501

        The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the Tgstation.Server.Api.Models.User, if any.  # noqa: E501

        :return: The group of this User.  # noqa: E501
        :rtype: AllOfUserGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this User.

        The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the Tgstation.Server.Api.Models.User, if any.  # noqa: E501

        :param group: The group of this User.  # noqa: E501
        :type: AllOfUserGroup
        """

        self._group = group

    @property
    def enabled(self):
        """Gets the enabled of this User.  # noqa: E501

        If the Tgstation.Server.Api.Models.Internal.User is enabled since users cannot be deleted. System users cannot be disabled  # noqa: E501

        :return: The enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.

        If the Tgstation.Server.Api.Models.Internal.User is enabled since users cannot be deleted. System users cannot be disabled  # noqa: E501

        :param enabled: The enabled of this User.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501

        When the Tgstation.Server.Api.Models.Internal.User was created  # noqa: E501

        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        When the Tgstation.Server.Api.Models.Internal.User was created  # noqa: E501

        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def system_identifier(self):
        """Gets the system_identifier of this User.  # noqa: E501

        The SID/UID of the Tgstation.Server.Api.Models.Internal.User on Windows/POSIX respectively  # noqa: E501

        :return: The system_identifier of this User.  # noqa: E501
        :rtype: str
        """
        return self._system_identifier

    @system_identifier.setter
    def system_identifier(self, system_identifier):
        """Sets the system_identifier of this User.

        The SID/UID of the Tgstation.Server.Api.Models.Internal.User on Windows/POSIX respectively  # noqa: E501

        :param system_identifier: The system_identifier of this User.  # noqa: E501
        :type: str
        """

        self._system_identifier = system_identifier

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        The ID of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The ID of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        The name of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The name of the Tgstation.Server.Api.Models.Internal.User  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
