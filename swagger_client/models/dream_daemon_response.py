# coding: utf-8

"""
    TGS API

    A production scale tool for BYOND server management  # noqa: E501

    OpenAPI spec version: 9.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DreamDaemonResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_compile_job': 'AllOfDreamDaemonResponseActiveCompileJob',
        'staged_compile_job': 'AllOfDreamDaemonResponseStagedCompileJob',
        'status': 'AllOfDreamDaemonResponseStatus',
        'current_security': 'AllOfDreamDaemonResponseCurrentSecurity',
        'current_port': 'int',
        'current_allow_webclient': 'bool',
        'soft_restart': 'bool',
        'soft_shutdown': 'bool',
        'auto_start': 'bool',
        'allow_web_client': 'bool',
        'security_level': 'AllOfDreamDaemonResponseSecurityLevel',
        'port': 'int',
        'startup_timeout': 'int',
        'heartbeat_seconds': 'int',
        'topic_request_timeout': 'int',
        'additional_parameters': 'str'
    }

    attribute_map = {
        'active_compile_job': 'activeCompileJob',
        'staged_compile_job': 'stagedCompileJob',
        'status': 'status',
        'current_security': 'currentSecurity',
        'current_port': 'currentPort',
        'current_allow_webclient': 'currentAllowWebclient',
        'soft_restart': 'softRestart',
        'soft_shutdown': 'softShutdown',
        'auto_start': 'autoStart',
        'allow_web_client': 'allowWebClient',
        'security_level': 'securityLevel',
        'port': 'port',
        'startup_timeout': 'startupTimeout',
        'heartbeat_seconds': 'heartbeatSeconds',
        'topic_request_timeout': 'topicRequestTimeout',
        'additional_parameters': 'additionalParameters'
    }

    def __init__(self, active_compile_job=None, staged_compile_job=None, status=None, current_security=None, current_port=None, current_allow_webclient=None, soft_restart=None, soft_shutdown=None, auto_start=None, allow_web_client=None, security_level=None, port=None, startup_timeout=None, heartbeat_seconds=None, topic_request_timeout=None, additional_parameters=None):  # noqa: E501
        """DreamDaemonResponse - a model defined in Swagger"""  # noqa: E501
        self._active_compile_job = None
        self._staged_compile_job = None
        self._status = None
        self._current_security = None
        self._current_port = None
        self._current_allow_webclient = None
        self._soft_restart = None
        self._soft_shutdown = None
        self._auto_start = None
        self._allow_web_client = None
        self._security_level = None
        self._port = None
        self._startup_timeout = None
        self._heartbeat_seconds = None
        self._topic_request_timeout = None
        self._additional_parameters = None
        self.discriminator = None
        if active_compile_job is not None:
            self.active_compile_job = active_compile_job
        if staged_compile_job is not None:
            self.staged_compile_job = staged_compile_job
        if status is not None:
            self.status = status
        if current_security is not None:
            self.current_security = current_security
        if current_port is not None:
            self.current_port = current_port
        if current_allow_webclient is not None:
            self.current_allow_webclient = current_allow_webclient
        if soft_restart is not None:
            self.soft_restart = soft_restart
        if soft_shutdown is not None:
            self.soft_shutdown = soft_shutdown
        if auto_start is not None:
            self.auto_start = auto_start
        if allow_web_client is not None:
            self.allow_web_client = allow_web_client
        if security_level is not None:
            self.security_level = security_level
        if port is not None:
            self.port = port
        if startup_timeout is not None:
            self.startup_timeout = startup_timeout
        if heartbeat_seconds is not None:
            self.heartbeat_seconds = heartbeat_seconds
        if topic_request_timeout is not None:
            self.topic_request_timeout = topic_request_timeout
        if additional_parameters is not None:
            self.additional_parameters = additional_parameters

    @property
    def active_compile_job(self):
        """Gets the active_compile_job of this DreamDaemonResponse.  # noqa: E501

        The live revision.  # noqa: E501

        :return: The active_compile_job of this DreamDaemonResponse.  # noqa: E501
        :rtype: AllOfDreamDaemonResponseActiveCompileJob
        """
        return self._active_compile_job

    @active_compile_job.setter
    def active_compile_job(self, active_compile_job):
        """Sets the active_compile_job of this DreamDaemonResponse.

        The live revision.  # noqa: E501

        :param active_compile_job: The active_compile_job of this DreamDaemonResponse.  # noqa: E501
        :type: AllOfDreamDaemonResponseActiveCompileJob
        """

        self._active_compile_job = active_compile_job

    @property
    def staged_compile_job(self):
        """Gets the staged_compile_job of this DreamDaemonResponse.  # noqa: E501

        The next revision to go live.  # noqa: E501

        :return: The staged_compile_job of this DreamDaemonResponse.  # noqa: E501
        :rtype: AllOfDreamDaemonResponseStagedCompileJob
        """
        return self._staged_compile_job

    @staged_compile_job.setter
    def staged_compile_job(self, staged_compile_job):
        """Sets the staged_compile_job of this DreamDaemonResponse.

        The next revision to go live.  # noqa: E501

        :param staged_compile_job: The staged_compile_job of this DreamDaemonResponse.  # noqa: E501
        :type: AllOfDreamDaemonResponseStagedCompileJob
        """

        self._staged_compile_job = staged_compile_job

    @property
    def status(self):
        """Gets the status of this DreamDaemonResponse.  # noqa: E501

        The current Tgstation.Server.Api.Models.WatchdogStatus.  # noqa: E501

        :return: The status of this DreamDaemonResponse.  # noqa: E501
        :rtype: AllOfDreamDaemonResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DreamDaemonResponse.

        The current Tgstation.Server.Api.Models.WatchdogStatus.  # noqa: E501

        :param status: The status of this DreamDaemonResponse.  # noqa: E501
        :type: AllOfDreamDaemonResponseStatus
        """

        self._status = status

    @property
    def current_security(self):
        """Gets the current_security of this DreamDaemonResponse.  # noqa: E501

        The current Tgstation.Server.Api.Models.DreamDaemonSecurity of Tgstation.Server.Api.Models.Response.DreamDaemonResponse. May be downgraded due to requirements of Tgstation.Server.Api.Models.Response.DreamDaemonResponse.ActiveCompileJob  # noqa: E501

        :return: The current_security of this DreamDaemonResponse.  # noqa: E501
        :rtype: AllOfDreamDaemonResponseCurrentSecurity
        """
        return self._current_security

    @current_security.setter
    def current_security(self, current_security):
        """Sets the current_security of this DreamDaemonResponse.

        The current Tgstation.Server.Api.Models.DreamDaemonSecurity of Tgstation.Server.Api.Models.Response.DreamDaemonResponse. May be downgraded due to requirements of Tgstation.Server.Api.Models.Response.DreamDaemonResponse.ActiveCompileJob  # noqa: E501

        :param current_security: The current_security of this DreamDaemonResponse.  # noqa: E501
        :type: AllOfDreamDaemonResponseCurrentSecurity
        """

        self._current_security = current_security

    @property
    def current_port(self):
        """Gets the current_port of this DreamDaemonResponse.  # noqa: E501

        The port the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to  # noqa: E501

        :return: The current_port of this DreamDaemonResponse.  # noqa: E501
        :rtype: int
        """
        return self._current_port

    @current_port.setter
    def current_port(self, current_port):
        """Sets the current_port of this DreamDaemonResponse.

        The port the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to  # noqa: E501

        :param current_port: The current_port of this DreamDaemonResponse.  # noqa: E501
        :type: int
        """

        self._current_port = current_port

    @property
    def current_allow_webclient(self):
        """Gets the current_allow_webclient of this DreamDaemonResponse.  # noqa: E501

        The webclient status the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to  # noqa: E501

        :return: The current_allow_webclient of this DreamDaemonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._current_allow_webclient

    @current_allow_webclient.setter
    def current_allow_webclient(self, current_allow_webclient):
        """Sets the current_allow_webclient of this DreamDaemonResponse.

        The webclient status the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to  # noqa: E501

        :param current_allow_webclient: The current_allow_webclient of this DreamDaemonResponse.  # noqa: E501
        :type: bool
        """

        self._current_allow_webclient = current_allow_webclient

    @property
    def soft_restart(self):
        """Gets the soft_restart of this DreamDaemonResponse.  # noqa: E501

        If the server is undergoing a soft reset. This may be automatically set by changes to other fields  # noqa: E501

        :return: The soft_restart of this DreamDaemonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._soft_restart

    @soft_restart.setter
    def soft_restart(self, soft_restart):
        """Sets the soft_restart of this DreamDaemonResponse.

        If the server is undergoing a soft reset. This may be automatically set by changes to other fields  # noqa: E501

        :param soft_restart: The soft_restart of this DreamDaemonResponse.  # noqa: E501
        :type: bool
        """

        self._soft_restart = soft_restart

    @property
    def soft_shutdown(self):
        """Gets the soft_shutdown of this DreamDaemonResponse.  # noqa: E501

        If the server is undergoing a soft shutdown  # noqa: E501

        :return: The soft_shutdown of this DreamDaemonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._soft_shutdown

    @soft_shutdown.setter
    def soft_shutdown(self, soft_shutdown):
        """Sets the soft_shutdown of this DreamDaemonResponse.

        If the server is undergoing a soft shutdown  # noqa: E501

        :param soft_shutdown: The soft_shutdown of this DreamDaemonResponse.  # noqa: E501
        :type: bool
        """

        self._soft_shutdown = soft_shutdown

    @property
    def auto_start(self):
        """Gets the auto_start of this DreamDaemonResponse.  # noqa: E501

        If the watchdog starts when it's Tgstation.Server.Api.Models.Instance starts  # noqa: E501

        :return: The auto_start of this DreamDaemonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._auto_start

    @auto_start.setter
    def auto_start(self, auto_start):
        """Sets the auto_start of this DreamDaemonResponse.

        If the watchdog starts when it's Tgstation.Server.Api.Models.Instance starts  # noqa: E501

        :param auto_start: The auto_start of this DreamDaemonResponse.  # noqa: E501
        :type: bool
        """

        self._auto_start = auto_start

    @property
    def allow_web_client(self):
        """Gets the allow_web_client of this DreamDaemonResponse.  # noqa: E501

        If the BYOND web client can be used to connect to the game server  # noqa: E501

        :return: The allow_web_client of this DreamDaemonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_web_client

    @allow_web_client.setter
    def allow_web_client(self, allow_web_client):
        """Sets the allow_web_client of this DreamDaemonResponse.

        If the BYOND web client can be used to connect to the game server  # noqa: E501

        :param allow_web_client: The allow_web_client of this DreamDaemonResponse.  # noqa: E501
        :type: bool
        """

        self._allow_web_client = allow_web_client

    @property
    def security_level(self):
        """Gets the security_level of this DreamDaemonResponse.  # noqa: E501

        The Tgstation.Server.Api.Models.DreamDaemonSecurity level of DreamDaemon.  # noqa: E501

        :return: The security_level of this DreamDaemonResponse.  # noqa: E501
        :rtype: AllOfDreamDaemonResponseSecurityLevel
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this DreamDaemonResponse.

        The Tgstation.Server.Api.Models.DreamDaemonSecurity level of DreamDaemon.  # noqa: E501

        :param security_level: The security_level of this DreamDaemonResponse.  # noqa: E501
        :type: AllOfDreamDaemonResponseSecurityLevel
        """

        self._security_level = security_level

    @property
    def port(self):
        """Gets the port of this DreamDaemonResponse.  # noqa: E501

        The port DreamDaemon uses. This should be publically accessible.  # noqa: E501

        :return: The port of this DreamDaemonResponse.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DreamDaemonResponse.

        The port DreamDaemon uses. This should be publically accessible.  # noqa: E501

        :param port: The port of this DreamDaemonResponse.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def startup_timeout(self):
        """Gets the startup_timeout of this DreamDaemonResponse.  # noqa: E501

        The DreamDaemon startup timeout in seconds  # noqa: E501

        :return: The startup_timeout of this DreamDaemonResponse.  # noqa: E501
        :rtype: int
        """
        return self._startup_timeout

    @startup_timeout.setter
    def startup_timeout(self, startup_timeout):
        """Sets the startup_timeout of this DreamDaemonResponse.

        The DreamDaemon startup timeout in seconds  # noqa: E501

        :param startup_timeout: The startup_timeout of this DreamDaemonResponse.  # noqa: E501
        :type: int
        """

        self._startup_timeout = startup_timeout

    @property
    def heartbeat_seconds(self):
        """Gets the heartbeat_seconds of this DreamDaemonResponse.  # noqa: E501

        The number of seconds between each watchdog heartbeat. 0 disables.  # noqa: E501

        :return: The heartbeat_seconds of this DreamDaemonResponse.  # noqa: E501
        :rtype: int
        """
        return self._heartbeat_seconds

    @heartbeat_seconds.setter
    def heartbeat_seconds(self, heartbeat_seconds):
        """Sets the heartbeat_seconds of this DreamDaemonResponse.

        The number of seconds between each watchdog heartbeat. 0 disables.  # noqa: E501

        :param heartbeat_seconds: The heartbeat_seconds of this DreamDaemonResponse.  # noqa: E501
        :type: int
        """

        self._heartbeat_seconds = heartbeat_seconds

    @property
    def topic_request_timeout(self):
        """Gets the topic_request_timeout of this DreamDaemonResponse.  # noqa: E501

        The timeout for sending and receiving BYOND topics in milliseconds.  # noqa: E501

        :return: The topic_request_timeout of this DreamDaemonResponse.  # noqa: E501
        :rtype: int
        """
        return self._topic_request_timeout

    @topic_request_timeout.setter
    def topic_request_timeout(self, topic_request_timeout):
        """Sets the topic_request_timeout of this DreamDaemonResponse.

        The timeout for sending and receiving BYOND topics in milliseconds.  # noqa: E501

        :param topic_request_timeout: The topic_request_timeout of this DreamDaemonResponse.  # noqa: E501
        :type: int
        """

        self._topic_request_timeout = topic_request_timeout

    @property
    def additional_parameters(self):
        """Gets the additional_parameters of this DreamDaemonResponse.  # noqa: E501

        Parameters string for DreamDaemon.  # noqa: E501

        :return: The additional_parameters of this DreamDaemonResponse.  # noqa: E501
        :rtype: str
        """
        return self._additional_parameters

    @additional_parameters.setter
    def additional_parameters(self, additional_parameters):
        """Sets the additional_parameters of this DreamDaemonResponse.

        Parameters string for DreamDaemon.  # noqa: E501

        :param additional_parameters: The additional_parameters of this DreamDaemonResponse.  # noqa: E501
        :type: str
        """

        self._additional_parameters = additional_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DreamDaemonResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DreamDaemonResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
