# coding: utf-8

"""
    TGS API

    A production scale tool for BYOND server management  # noqa: E501

    OpenAPI spec version: 9.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerInformationResponseOAuthProviderInfos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'git_hub': 'OAuthProviderInfo',
        'discord': 'OAuthProviderInfo',
        'tg_forums': 'OAuthProviderInfo',
        'keycloak': 'OAuthProviderInfo'
    }

    attribute_map = {
        'git_hub': 'GitHub',
        'discord': 'Discord',
        'tg_forums': 'TGForums',
        'keycloak': 'Keycloak'
    }

    def __init__(self, git_hub=None, discord=None, tg_forums=None, keycloak=None):  # noqa: E501
        """ServerInformationResponseOAuthProviderInfos - a model defined in Swagger"""  # noqa: E501
        self._git_hub = None
        self._discord = None
        self._tg_forums = None
        self._keycloak = None
        self.discriminator = None
        if git_hub is not None:
            self.git_hub = git_hub
        if discord is not None:
            self.discord = discord
        if tg_forums is not None:
            self.tg_forums = tg_forums
        if keycloak is not None:
            self.keycloak = keycloak

    @property
    def git_hub(self):
        """Gets the git_hub of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501


        :return: The git_hub of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :rtype: OAuthProviderInfo
        """
        return self._git_hub

    @git_hub.setter
    def git_hub(self, git_hub):
        """Sets the git_hub of this ServerInformationResponseOAuthProviderInfos.


        :param git_hub: The git_hub of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :type: OAuthProviderInfo
        """

        self._git_hub = git_hub

    @property
    def discord(self):
        """Gets the discord of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501


        :return: The discord of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :rtype: OAuthProviderInfo
        """
        return self._discord

    @discord.setter
    def discord(self, discord):
        """Sets the discord of this ServerInformationResponseOAuthProviderInfos.


        :param discord: The discord of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :type: OAuthProviderInfo
        """

        self._discord = discord

    @property
    def tg_forums(self):
        """Gets the tg_forums of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501


        :return: The tg_forums of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :rtype: OAuthProviderInfo
        """
        return self._tg_forums

    @tg_forums.setter
    def tg_forums(self, tg_forums):
        """Sets the tg_forums of this ServerInformationResponseOAuthProviderInfos.


        :param tg_forums: The tg_forums of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :type: OAuthProviderInfo
        """

        self._tg_forums = tg_forums

    @property
    def keycloak(self):
        """Gets the keycloak of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501


        :return: The keycloak of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :rtype: OAuthProviderInfo
        """
        return self._keycloak

    @keycloak.setter
    def keycloak(self, keycloak):
        """Sets the keycloak of this ServerInformationResponseOAuthProviderInfos.


        :param keycloak: The keycloak of this ServerInformationResponseOAuthProviderInfos.  # noqa: E501
        :type: OAuthProviderInfo
        """

        self._keycloak = keycloak

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerInformationResponseOAuthProviderInfos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerInformationResponseOAuthProviderInfos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
