# coding: utf-8

"""
    TGS API

    A production scale tool for BYOND server management  # noqa: E501

    OpenAPI spec version: 8.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DreamMaker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_name': 'str',
        'api_validation_port': 'int',
        'api_validation_security_level': 'AllOfDreamMakerApiValidationSecurityLevel',
        'require_dm_api_validation': 'bool'
    }

    attribute_map = {
        'project_name': 'projectName',
        'api_validation_port': 'apiValidationPort',
        'api_validation_security_level': 'apiValidationSecurityLevel',
        'require_dm_api_validation': 'requireDMApiValidation'
    }

    def __init__(self, project_name=None, api_validation_port=None, api_validation_security_level=None, require_dm_api_validation=None):  # noqa: E501
        """DreamMaker - a model defined in Swagger"""  # noqa: E501
        self._project_name = None
        self._api_validation_port = None
        self._api_validation_security_level = None
        self._require_dm_api_validation = None
        self.discriminator = None
        if project_name is not None:
            self.project_name = project_name
        if api_validation_port is not None:
            self.api_validation_port = api_validation_port
        if api_validation_security_level is not None:
            self.api_validation_security_level = api_validation_security_level
        if require_dm_api_validation is not None:
            self.require_dm_api_validation = require_dm_api_validation

    @property
    def project_name(self):
        """Gets the project_name of this DreamMaker.  # noqa: E501

        The .dme file Tgstation.Server.Api.Models.DreamMaker tries to compile with without the extension  # noqa: E501

        :return: The project_name of this DreamMaker.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this DreamMaker.

        The .dme file Tgstation.Server.Api.Models.DreamMaker tries to compile with without the extension  # noqa: E501

        :param project_name: The project_name of this DreamMaker.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def api_validation_port(self):
        """Gets the api_validation_port of this DreamMaker.  # noqa: E501

        The port used during compilation to validate the DMAPI  # noqa: E501

        :return: The api_validation_port of this DreamMaker.  # noqa: E501
        :rtype: int
        """
        return self._api_validation_port

    @api_validation_port.setter
    def api_validation_port(self, api_validation_port):
        """Sets the api_validation_port of this DreamMaker.

        The port used during compilation to validate the DMAPI  # noqa: E501

        :param api_validation_port: The api_validation_port of this DreamMaker.  # noqa: E501
        :type: int
        """

        self._api_validation_port = api_validation_port

    @property
    def api_validation_security_level(self):
        """Gets the api_validation_security_level of this DreamMaker.  # noqa: E501

        The Tgstation.Server.Api.Models.DreamDaemonSecurity level used to validate the DMAPI  # noqa: E501

        :return: The api_validation_security_level of this DreamMaker.  # noqa: E501
        :rtype: AllOfDreamMakerApiValidationSecurityLevel
        """
        return self._api_validation_security_level

    @api_validation_security_level.setter
    def api_validation_security_level(self, api_validation_security_level):
        """Sets the api_validation_security_level of this DreamMaker.

        The Tgstation.Server.Api.Models.DreamDaemonSecurity level used to validate the DMAPI  # noqa: E501

        :param api_validation_security_level: The api_validation_security_level of this DreamMaker.  # noqa: E501
        :type: AllOfDreamMakerApiValidationSecurityLevel
        """

        self._api_validation_security_level = api_validation_security_level

    @property
    def require_dm_api_validation(self):
        """Gets the require_dm_api_validation of this DreamMaker.  # noqa: E501

        If API validation should be required for a deployment to succeed.  # noqa: E501

        :return: The require_dm_api_validation of this DreamMaker.  # noqa: E501
        :rtype: bool
        """
        return self._require_dm_api_validation

    @require_dm_api_validation.setter
    def require_dm_api_validation(self, require_dm_api_validation):
        """Sets the require_dm_api_validation of this DreamMaker.

        If API validation should be required for a deployment to succeed.  # noqa: E501

        :param require_dm_api_validation: The require_dm_api_validation of this DreamMaker.  # noqa: E501
        :type: bool
        """

        self._require_dm_api_validation = require_dm_api_validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DreamMaker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DreamMaker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
